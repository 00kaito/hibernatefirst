package com.akademiakodu.mysql.hibernatefirst;

import com.akademiakodu.mysql.hibernatefirst.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // kanowanie klasy, wie ze to konroller
@RequestMapping(path="/demo") // mozemy miec to przed kontrollerem, kontrollerem oznacza, ze wszsystkie sciezki beda zaczynaly sie od /demo
public class MainController {
    @Autowired //automatyczne wiązanie - wiąze obiekt userReposotory z klasą którą impementuje interfejs userRepository;
    // jeśli 2 klasy implementuję ten interfejs, wtedy trzeba użyc dodatkowej adnotacji primary w celu skorzystania z wlasciwego konstruktora;
    // jesli nie ma takiej klasyu, wtedy generuje sobie taką klasę w locie (magia ;)) - mechanizm refleksji)

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}